import java.util.function.BooleanSupplier

private static def repeatToCheck(int retryTimes, String msg, BooleanSupplier checkerFunc) {
    // 反复检查是否可用，返回false为检测失败，需要重试
    while (!checkerFunc.getAsBoolean()) {
        // 如果剩余可重试次数大于0，则等待并重试
        if (retryTimes > 0) {
            retryTimes--
            try {
                Thread.sleep(50)
            } catch (InterruptedException ignore) {
            }
        } else {
            // 该如何合法的结束编译过程并在IDE中给予警告
            System.err.println("安全检查失败: $msg")
            Runtime.runtime.exit(-1)
        }
    }
}

def getVcsVersionCode() {
    // 正式编译并未获取到vcs版本号情况下，不断重试获取
    repeatToCheck(40, "未能成功获取Vcs版本号") {
        !gradle.ext.isRelease || gradle.ext.has("vcsVersion")
    }
    println("getVcsVersionCode " + gradle.ext.vcsVersion)
    if (gradle.ext.isRelease && gradle.ext.vcsVersion == 0) {
        throw IllegalArgumentException("Release编译获取到的vcsVersion为0")
    }
    return gradle.ext.vcsVersion
}

def getVcsCommitId() {
    // 正式编译并未获取到vcs commitId情况下，不断重试获取
    repeatToCheck(40, "未能成功获取Vcs CommitId") {
        !gradle.ext.isRelease || gradle.ext.has("vcsCommitId")
    }
    println("getVcsCommitId " + gradle.ext.vcsCommitId)
    if (gradle.ext.isRelease && gradle.ext.vcsCommitId == "-") {
        throw IllegalArgumentException("Release编译获取到的vcsCommitId为-")
    }
    return gradle.ext.vcsCommitId
}

android {
    defaultConfig {
        versionCode getVcsVersionCode()
        // 将vcs的版本号填充到应用内标记中
        manifestPlaceholders.put("buildDate", new Date().toString())
        manifestPlaceholders.put("vcsCommitId", getVcsCommitId())
    }
}
